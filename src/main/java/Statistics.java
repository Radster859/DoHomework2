
import java.awt.Color;
import java.awt.Graphics;
import java.util.Collection;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author bodeng
 */
public class Statistics extends javax.swing.JPanel {
    
    private TreeMap<String, Integer> blockedSiteMap;
    private TreeMap<String, Integer> blockedAppMap;
    
    /**
     * Creates new form Statistics
     */
    public Statistics() {
        initComponents();
        blockedSiteMap = new TreeMap<>();
        blockedAppMap = new TreeMap<>();
        repaint();
    }
    
    public void siteBlocked(String url) {
        if (blockedSiteMap.containsKey(url)) {
            blockedSiteMap.put(url, blockedSiteMap.get(url) + 1);
        }
        else {
            blockedSiteMap.put(url, 1);
        }
    }
    
    public void appBlocked(String appName) {
        if (blockedAppMap.containsKey(appName)) {
            blockedAppMap.put(appName, blockedAppMap.get(appName) + 1);
        }
        else {
            blockedAppMap.put(appName, 1);
        }
    }
    
    public int getMaxCount(Map map) {
        Collection<Integer> c = map.values();
        int maxCount = 0;
        for (int i : c) {
            maxCount = Math.max(maxCount, i);
        }
        return maxCount;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        int bufferLeft = 20;
        int bufferBottom = 20;
        int bufferSite = 300;
        int bufferBarBetween = 10;
        int barWidth = 20;
        int barHeightMult = getHeight() / 11 * 8 / getMaxCount(blockedAppMap);
        
        Set<String> appSet = blockedAppMap.keySet();
        int currBarNum = 0;
        for (String appName : appSet) {
            int numTimes = blockedAppMap.get(appName);
            int nonBlueVal = (int) (255 - (numTimes / (float) getMaxCount(blockedAppMap) * 255));
            int barHeight = numTimes * barHeightMult;
            g.setColor(new Color(nonBlueVal, nonBlueVal, 255));
            g.fillRect(bufferLeft + currBarNum * (barWidth + bufferBarBetween), getHeight() - bufferBottom - barHeight, barWidth, barHeight);
            currBarNum++;
        }
        
        barHeightMult = getHeight() / 11 * 8 / getMaxCount(blockedSiteMap);
        
        Set<String> siteSet = blockedSiteMap.keySet();
        currBarNum = 0;
        
        for (String siteName : siteSet) {
            int numTimes = blockedSiteMap.get(siteName);
            int nonRedVal = (int) (255 - (numTimes / (float) getMaxCount(blockedSiteMap) * 255));
            int barHeight = numTimes * barHeightMult;
            g.setColor(new Color(255, nonRedVal, nonRedVal));
            g.fillRect(300 + bufferLeft + currBarNum * (barWidth + bufferBarBetween), getHeight() - bufferBottom - barHeight, barWidth, barHeight);
            currBarNum++;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
